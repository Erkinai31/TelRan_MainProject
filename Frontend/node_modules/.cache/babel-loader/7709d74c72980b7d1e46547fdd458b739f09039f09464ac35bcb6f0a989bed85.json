{"ast":null,"code":"let defaultState = {\n  basket: []\n};\nconst ADD_PRODUCT = 'ADD_PRODUCT';\nconst REM_PRODUCT = 'ADD_PRODUCT';\nconst ADD_MORE_PRODUCTS = 'ADD_PRODUCTS';\nexport const basketReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        basket: [...state.basket, action]\n      };\n    case REM_PRODUCT:\n      let basketGood = state.basket.find(elem => elem.id == action.payload);\n      if (basketGood.count == 1) {\n        return {\n          ...state,\n          basket: state.basket.filter(elem => elem.id != action.payload)\n        };\n      } else {\n        return {\n          ...state,\n          basket: state.basket.map(elem => {\n            if (elem.id == action.payload) {\n              elem.count = elem.count - 1;\n            }\n            return elem;\n          })\n        };\n      }\n    case ADD_MORE_PRODUCTS:\n      let newGood = state.basket.find(elem => elem.name == action.payload);\n      if (newGood) {\n        return {\n          ...state,\n          basket: state.basket.map(elem => {\n            if (elem.id == newGood.id) {\n              elem.count = elem.count + 1;\n            }\n            return elem;\n          })\n        };\n      } else {\n        return {\n          ...state,\n          basket: [...state.basket, {\n            id: Math.max(...state.basket.map(elem => elem.id)) + 1,\n            name: action.payload,\n            count: 1\n          }]\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport const addProductAction = payload => ({\n  type: ADD_PRODUCT,\n  payload\n});\nexport const remProductAction = payload => ({\n  type: REM_PRODUCT,\n  payload\n});\nexport const addMoreProductAction = payload => ({\n  type: ADD_MORE_PRODUCTS,\n  payload\n});","map":{"version":3,"names":["defaultState","basket","ADD_PRODUCT","REM_PRODUCT","ADD_MORE_PRODUCTS","basketReducer","state","action","type","basketGood","find","elem","id","payload","count","filter","map","newGood","name","Math","max","addProductAction","remProductAction","addMoreProductAction"],"sources":["/Users/azadatca/Desktop/Tel-RanProject/myapp/src/store/basketReducer.js"],"sourcesContent":["let defaultState = {\n    basket: []\n}\n\nconst ADD_PRODUCT = 'ADD_PRODUCT'\nconst REM_PRODUCT = 'ADD_PRODUCT'\nconst ADD_MORE_PRODUCTS = 'ADD_PRODUCTS'\n\n\nexport const basketReducer = (state = defaultState, action) => {\n    switch (action.type){\n        case ADD_PRODUCT:\n            return {...state, basket:[...state.basket,action]  }\n       \n        case REM_PRODUCT:\n            let basketGood = state.basket.find(elem => elem.id == action.payload)\n            if (basketGood.count == 1){\n                return {...state, basket: state.basket.filter(elem => elem.id != action.payload)}\n            } else {\n                return {...state, basket: state.basket.map(elem => {\n                    if (elem.id == action.payload){\n                        elem.count = elem.count - 1\n                    }\n                    return elem\n                })}\n            }\n        case ADD_MORE_PRODUCTS:\n            let newGood = state.basket.find(elem => elem.name == action.payload)\n            if (newGood) {\n                return {...state, basket: state.basket.map(elem => {\n                    if (elem.id == newGood.id){\n                        elem.count = elem.count + 1\n                    }\n                    return elem\n                })}\n            } else {\n                return {...state, basket: [...state.basket, \n                    {\n                        id: Math.max(...state.basket.map(elem => elem.id)) + 1,\n                        name: action.payload,\n                        count: 1\n                    }]}\n            }\n        default: \n            return state\n    }\n}\n\n\nexport const addProductAction = (payload) => ({type: ADD_PRODUCT, payload}) \nexport const remProductAction = (payload) => ({type: REM_PRODUCT, payload}) \nexport const addMoreProductAction = (payload) => ({type: ADD_MORE_PRODUCTS, payload})\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG;EACfC,MAAM,EAAE;AACZ,CAAC;AAED,MAAMC,WAAW,GAAG,aAAa;AACjC,MAAMC,WAAW,GAAG,aAAa;AACjC,MAAMC,iBAAiB,GAAG,cAAc;AAGxC,OAAO,MAAMC,aAAa,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGN,YAAY;EAAA,IAAEO,MAAM;EACtD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKN,WAAW;MACZ,OAAO;QAAC,GAAGI,KAAK;QAAEL,MAAM,EAAC,CAAC,GAAGK,KAAK,CAACL,MAAM,EAACM,MAAM;MAAG,CAAC;IAExD,KAAKJ,WAAW;MACZ,IAAIM,UAAU,GAAGH,KAAK,CAACL,MAAM,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,OAAO,CAAC;MACrE,IAAIJ,UAAU,CAACK,KAAK,IAAI,CAAC,EAAC;QACtB,OAAO;UAAC,GAAGR,KAAK;UAAEL,MAAM,EAAEK,KAAK,CAACL,MAAM,CAACc,MAAM,CAACJ,IAAI,IAAIA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,OAAO;QAAC,CAAC;MACrF,CAAC,MAAM;QACH,OAAO;UAAC,GAAGP,KAAK;UAAEL,MAAM,EAAEK,KAAK,CAACL,MAAM,CAACe,GAAG,CAACL,IAAI,IAAI;YAC/C,IAAIA,IAAI,CAACC,EAAE,IAAIL,MAAM,CAACM,OAAO,EAAC;cAC1BF,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACG,KAAK,GAAG,CAAC;YAC/B;YACA,OAAOH,IAAI;UACf,CAAC;QAAC,CAAC;MACP;IACJ,KAAKP,iBAAiB;MAClB,IAAIa,OAAO,GAAGX,KAAK,CAACL,MAAM,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACO,IAAI,IAAIX,MAAM,CAACM,OAAO,CAAC;MACpE,IAAII,OAAO,EAAE;QACT,OAAO;UAAC,GAAGX,KAAK;UAAEL,MAAM,EAAEK,KAAK,CAACL,MAAM,CAACe,GAAG,CAACL,IAAI,IAAI;YAC/C,IAAIA,IAAI,CAACC,EAAE,IAAIK,OAAO,CAACL,EAAE,EAAC;cACtBD,IAAI,CAACG,KAAK,GAAGH,IAAI,CAACG,KAAK,GAAG,CAAC;YAC/B;YACA,OAAOH,IAAI;UACf,CAAC;QAAC,CAAC;MACP,CAAC,MAAM;QACH,OAAO;UAAC,GAAGL,KAAK;UAAEL,MAAM,EAAE,CAAC,GAAGK,KAAK,CAACL,MAAM,EACtC;YACIW,EAAE,EAAEO,IAAI,CAACC,GAAG,CAAC,GAAGd,KAAK,CAACL,MAAM,CAACe,GAAG,CAACL,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC,CAAC,GAAG,CAAC;YACtDM,IAAI,EAAEX,MAAM,CAACM,OAAO;YACpBC,KAAK,EAAE;UACX,CAAC;QAAC,CAAC;MACX;IACJ;MACI,OAAOR,KAAK;EAAA;AAExB,CAAC;AAGD,OAAO,MAAMe,gBAAgB,GAAIR,OAAO,KAAM;EAACL,IAAI,EAAEN,WAAW;EAAEW;AAAO,CAAC,CAAC;AAC3E,OAAO,MAAMS,gBAAgB,GAAIT,OAAO,KAAM;EAACL,IAAI,EAAEL,WAAW;EAAEU;AAAO,CAAC,CAAC;AAC3E,OAAO,MAAMU,oBAAoB,GAAIV,OAAO,KAAM;EAACL,IAAI,EAAEJ,iBAAiB;EAAES;AAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}