{"ast":null,"code":"let defaultState = {\n  basket: []\n};\nconst ADD_PRODUCT = \"ADD_PRODUCT\";\nconst ADD_COUNT = \"ADD_COUNT\";\nconst REM_COUNT = \"REM_COUNT\";\nconst REM_ELEM = \"REM_ELEM\";\nconst ADD_GOODS = 'ADD_GOODS';\nexport const basketReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        basket: [...state.basket, {\n          ...action.payload,\n          count: 1\n        }]\n      };\n    case ADD_COUNT:\n      return {\n        ...state,\n        basket: state.basket.map(elem => {\n          if (elem.id == action.payload) {\n            elem.count = elem.count + 1;\n          }\n          return elem;\n        })\n      };\n    case REM_COUNT:\n      let cart = state.basket.find(elem => elem.id == action.payload);\n      if (cart.count == 1) {\n        return {\n          ...state,\n          basket: state.basket.filter(elem => elem.id != action.payload)\n        };\n      } else {\n        return {\n          ...state,\n          basket: state.basket.map(elem => {\n            if (elem.id == action.payload) {\n              elem.count = elem.count - 1;\n            }\n            return elem;\n          })\n        };\n      }\n    case ADD_GOODS:\n      let newGood = state.basket.find(elem => elem.tit == action.payload);\n      if (newGood) {\n        return {\n          ...state,\n          goods: state.goods.map(elem => {\n            if (elem.id == newGood.id) {\n              elem.count = elem.count + 1;\n            }\n            return elem;\n          })\n        };\n      } else {\n        return {\n          ...state,\n          goods: [...state.goods, {\n            id: Math.max(...state.goods.map(elem => elem.id)) + 1,\n            name: action.payload,\n            count: 1\n          }]\n        };\n      }\n    case REM_ELEM:\n      return {\n        ...state,\n        basket: state.basket.filter(elem => elem.id != action.payload)\n      };\n    default:\n      return state;\n  }\n};\nexport const addProductAction = payload => ({\n  type: ADD_PRODUCT,\n  payload\n});\nexport const addCountAction = payload => ({\n  type: ADD_COUNT,\n  payload\n});\nexport const remCountAction = payload => ({\n  type: REM_COUNT,\n  payload\n});\nexport const remElemAction = payload => ({\n  type: REM_ELEM,\n  payload\n});","map":{"version":3,"names":["defaultState","basket","ADD_PRODUCT","ADD_COUNT","REM_COUNT","REM_ELEM","ADD_GOODS","basketReducer","state","action","type","payload","count","map","elem","id","cart","find","filter","newGood","tit","goods","Math","max","name","addProductAction","addCountAction","remCountAction","remElemAction"],"sources":["/Users/azadatca/Desktop/Tel-RanProject/myapp/src/store/basketReducer.js"],"sourcesContent":["let defaultState = {\n  basket: [],\n};\n\nconst ADD_PRODUCT = \"ADD_PRODUCT\";\nconst ADD_COUNT = \"ADD_COUNT\";\nconst REM_COUNT = \"REM_COUNT\";\nconst REM_ELEM = \"REM_ELEM\";\nconst ADD_GOODS = 'ADD_GOODS'\n\nexport const basketReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        basket: [...state.basket, { ...action.payload, count: 1 }],\n      };\n    case ADD_COUNT:\n      return {\n        ...state,\n        basket: state.basket.map((elem) => {\n          if (elem.id == action.payload) {\n            elem.count = elem.count + 1;\n          }\n          return elem;\n        }),\n      };\n    case REM_COUNT:\n      let cart = state.basket.find((elem) => elem.id == action.payload);\n      if (cart.count == 1) {\n        return {\n          ...state,\n          basket: state.basket.filter((elem) => elem.id != action.payload),\n        };\n      } else {\n        return {\n          ...state,\n          basket: state.basket.map((elem) => {\n            if (elem.id == action.payload) {\n              elem.count = elem.count - 1;\n            }\n            return elem;\n          }),\n        };\n      }\n      case ADD_GOODS:\n        let newGood = state.basket.find(elem => elem.tit == action.payload)\n        if (newGood) {\n            return {...state, goods: state.goods.map(elem => {\n                if (elem.id == newGood.id){\n                    elem.count = elem.count + 1\n                }\n                return elem\n            })}\n        } else {\n            return {...state, goods: [...state.goods, \n                {\n                    id: Math.max(...state.goods.map(elem => elem.id)) + 1,\n                    name: action.payload,\n                    count: 1\n                }]}\n        }\n      case REM_ELEM:\n        return {...state, basket: state.basket.filter((elem) => elem.id != action.payload)}\n      \n\n    default:\n      return state;\n  }\n};\n\nexport const addProductAction = (payload) => ({ type: ADD_PRODUCT, payload });\nexport const addCountAction = (payload) => ({type: ADD_COUNT, payload}) \nexport const remCountAction = (payload) => ({type: REM_COUNT, payload}) \nexport const remElemAction = (payload) => ({type: REM_ELEM, payload})\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}