{"ast":null,"code":"let defaultState = {\n  basket: []\n};\nconst ADD_PRODUCT = \"ADD_PRODUCT\";\nconst ADD_ELEMS = \"ADD_PRODUCTS\";\nconst ADD_COUNT = \"ADD_COUNT\";\nconst REM_COUNT = \"REM_COUNT\";\nconst REM_ELEM = \"REM_ELEM\";\nexport const basketReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        basket: [...state.basket, {\n          ...action.payload,\n          count: 1\n        }]\n      };\n    case ADD_PRODUCTS:\n      let newGood = state.basket.find(elem => elem.title == action.payload);\n      if (newGood) {\n        return {\n          ...state,\n          basket: state.basket.map(elem => {\n            if (elem.id == newGood.id) {\n              elem.count = elem.count + 1;\n            }\n            return elem;\n          })\n        };\n      } else {\n        return {\n          ...state,\n          basket: [...state.basket, {\n            id: Math.max(...state.goods.map(elem => elem.id)) + 1,\n            title: action.payload,\n            count: 1\n          }]\n        };\n      }\n    case ADD_COUNT:\n      return {\n        ...state,\n        basket: state.basket.map(elem => {\n          if (elem.id == action.payload) {\n            elem.count = elem.count + 1;\n          }\n          return elem;\n        })\n      };\n    case REM_COUNT:\n      let cart = state.basket.find(elem => elem.id == action.payload);\n      if (cart.count == 1) {\n        return {\n          ...state,\n          basket: state.basket.filter(elem => elem.id != action.payload)\n        };\n      } else {\n        return {\n          ...state,\n          basket: state.basket.map(elem => {\n            if (elem.id == action.payload) {\n              elem.count = elem.count - 1;\n            }\n            return elem;\n          })\n        };\n      }\n    case REM_ELEM:\n      return {\n        ...state,\n        basket: state.basket.filter(elem => elem.id != action.payload)\n      };\n    default:\n      return state;\n  }\n};\nexport const addProductAction = payload => ({\n  type: ADD_PRODUCT,\n  payload\n});\nexport const addElemsAction = payload => ({\n  type: ADD_ELEMS,\n  payload\n});\nexport const addCountAction = payload => ({\n  type: ADD_COUNT,\n  payload\n});\nexport const remCountAction = payload => ({\n  type: REM_COUNT,\n  payload\n});\nexport const remElemAction = payload => ({\n  type: REM_ELEM,\n  payload\n});","map":{"version":3,"names":["defaultState","basket","ADD_PRODUCT","ADD_ELEMS","ADD_COUNT","REM_COUNT","REM_ELEM","basketReducer","state","action","type","payload","count","ADD_PRODUCTS","newGood","find","elem","title","map","id","Math","max","goods","cart","filter","addProductAction","addElemsAction","addCountAction","remCountAction","remElemAction"],"sources":["/Users/azadatca/Desktop/Tel-RanProject/myapp/src/store/basketReducer.js"],"sourcesContent":["let defaultState = {\n  basket: [],\n};\n\nconst ADD_PRODUCT = \"ADD_PRODUCT\";\nconst ADD_ELEMS = \"ADD_PRODUCTS\";\nconst ADD_COUNT = \"ADD_COUNT\";\nconst REM_COUNT = \"REM_COUNT\";\nconst REM_ELEM = \"REM_ELEM\";\n\n\nexport const basketReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      return {\n        ...state,\n        basket: [...state.basket, { ...action.payload, count: 1 }],\n      };\n      case ADD_PRODUCTS:\n        let newGood = state.basket.find(elem => elem.title == action.payload)\n        if (newGood) {\n            return {...state, basket: state.basket.map(elem => {\n                if (elem.id == newGood.id){\n                    elem.count = elem.count + 1\n                }\n                return elem\n            })}\n        } else {\n            return {...state, basket: [...state.basket, \n                {\n                    id: Math.max(...state.goods.map(elem => elem.id)) + 1,\n                    title: action.payload,\n                    count: 1\n                }]}\n        }\n    case ADD_COUNT:\n      return {\n        ...state,\n        basket: state.basket.map((elem) => {\n          if (elem.id == action.payload) {\n            elem.count = elem.count + 1;\n          }\n          return elem;\n        }),\n      };\n    case REM_COUNT:\n      let cart = state.basket.find((elem) => elem.id == action.payload);\n      if (cart.count == 1) {\n        return {\n          ...state,\n          basket: state.basket.filter((elem) => elem.id != action.payload),\n        };\n      } else {\n        return {\n          ...state,\n          basket: state.basket.map((elem) => {\n            if (elem.id == action.payload) {\n              elem.count = elem.count - 1;\n            }\n            return elem;\n          }),\n        };\n      }  \n      case REM_ELEM:\n        return {...state, basket: state.basket.filter((elem) => elem.id != action.payload)}\n      \n\n    default:\n      return state;\n  }\n};\n\nexport const addProductAction = (payload) => ({ type: ADD_PRODUCT, payload });\nexport const addElemsAction = (payload) => ({ type: ADD_ELEMS, payload });\nexport const addCountAction = (payload) => ({type: ADD_COUNT, payload}) \nexport const remCountAction = (payload) => ({type: REM_COUNT, payload}) \nexport const remElemAction = (payload) => ({type: REM_ELEM, payload})\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}